{
  "generatedSource": [
    {
      "filename": "packages/contract-air/Cargo.toml",
      "content": "[workspace]\n\nresolver = \"1\"\nmembers = [\n  \"src\"\n]",
      "contentHash": "72fbba0ae8f1e9965160d14eb9ffdaf149382667f320919492016c9569c9e8b2",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/contract-air/package.json",
      "content": "{\n    \"name\": \"@not-a-bird/contract-air\",\n    \"description\": \"PSP-22 compatible game smart contract for element 'air'\",\n    \"version\": \"0.0.1\",\n    \"private\": true,\n    \"dependencies\": {},\n    \"scripts\": {\n        \"build\": \"cargo contract build --target wasm --release --manifest-path src/Cargo.toml\"\n    }\n}",
      "contentHash": "e9655f46dd82755a4e38ce8d5625f1a5e36ab94ae454210c9369ccb1b04a5848",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/contract-air/README.md",
      "content": "# air - Contract\n\nThis is a air contract.\n\n### Quickstart\n\n- `cargo contract build`",
      "contentHash": "b7534fd3e31216e27c07986f047d04e8d672d89ed3ec5255b8d21c9d9a78a346",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/contract-air/src/Cargo.toml",
      "content": "[package]\nname = \"air\"\nversion = \"0.0.1\"\nauthors = [\"SIOCODE Llc. <info@siocode.hu>\"]\nedition = \"2021\"\n\n[dependencies]\nink = { version = \"5.0.0\", default-features = false }\n\n\n[lib]\npath = \"lib.rs\"\n\n[features]\ndefault = [\"std\"]\nstd = [\"ink/std\"]\nink-as-dependency = []",
      "contentHash": "f04bb0a3a4b373a11260152c8ec14df2b21888c43100ca23b48a1cb545590b8e",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/contract-air/src/lib.rs",
      "content": "#![cfg_attr(not(feature = \"std\"), no_std, no_main)]\n\n#[ink::contract]\npub mod air {\n    pub use ink::prelude::string::String;\n\n    /** Error type for PSP-22 compatible contract for element 'air' */\n    #[derive(Debug, PartialEq, Eq, Copy, Clone)]\n    #[ink::scale_derive(Encode, Decode, TypeInfo)]\n    pub enum Error {}\n\n    #[ink(storage)]\n    pub struct AirContract {\n        name: String,\n    }\n\n    impl Default for AirContract {\n        fn default() -> Self {\n            Self {\n                name: String::from(\"air\"),\n            }\n        }\n    }\n\n    impl AirContract {\n        /// Creates a new PSP-22 compatible Air Element contract\n        #[ink(constructor)]\n        pub fn new() -> Self {\n            Self::default()\n        }\n\n        #[ink(message)]\n        pub fn get_name(&self)-> String {\n            self.name.clone()\n        }\n    }\n\n}",
      "contentHash": "b6e7deefbff5ad50a9c728a083aaadde64365914af8b9a37b6560810c7f74c68",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/contract-earth/Cargo.toml",
      "content": "[workspace]\n\nresolver = \"1\"\nmembers = [\n  \"src\"\n]",
      "contentHash": "72fbba0ae8f1e9965160d14eb9ffdaf149382667f320919492016c9569c9e8b2",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/contract-earth/package.json",
      "content": "{\n    \"name\": \"@not-a-bird/contract-earth\",\n    \"description\": \"PSP-22 compatible game smart contract for element 'earth'\",\n    \"version\": \"0.0.1\",\n    \"private\": true,\n    \"dependencies\": {},\n    \"scripts\": {\n        \"build\": \"cargo contract build --target wasm --release --manifest-path src/Cargo.toml\"\n    }\n}",
      "contentHash": "148c02fbca356ac90f5edd1de72f03b78a7b4cf602cceb490926b1ecc11c4ded",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/contract-earth/README.md",
      "content": "# earth - Contract\n\nThis is a earth contract.\n\n### Quickstart\n\n- `cargo contract build`",
      "contentHash": "d4e858622cb28a9dbf9a997529e0633371ba39f366b5f5c1268f5c348c23ba45",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/contract-earth/src/Cargo.toml",
      "content": "[package]\nname = \"earth\"\nversion = \"0.0.1\"\nauthors = [\"SIOCODE Llc. <info@siocode.hu>\"]\nedition = \"2021\"\n\n[dependencies]\nink = { version = \"5.0.0\", default-features = false }\n\n\n[lib]\npath = \"lib.rs\"\n\n[features]\ndefault = [\"std\"]\nstd = [\"ink/std\"]\nink-as-dependency = []",
      "contentHash": "5a3f9d6d83be648c3420bf11d63ff2fc55249000ec3fc68f64eff2e759ac25f7",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/contract-earth/src/lib.rs",
      "content": "#![cfg_attr(not(feature = \"std\"), no_std, no_main)]\n\n#[ink::contract]\npub mod earth {\n    pub use ink::prelude::string::String;\n\n    /** Error type for PSP-22 compatible contract for element 'air' */\n    #[derive(Debug, PartialEq, Eq, Copy, Clone)]\n    #[ink::scale_derive(Encode, Decode, TypeInfo)]\n    pub enum Error {}\n\n    #[ink(storage)]\n    pub struct EarthContract {\n        name: String,\n    }\n\n    impl Default for EarthContract {\n        fn default() -> Self {\n            Self {\n                name: String::from(\"earth\"),\n            }\n        }\n    }\n\n    impl EarthContract {\n        /// Creates a new PSP-22 compatible Earth Element contract\n        #[ink(constructor)]\n        pub fn new() -> Self {\n            Self::default()\n        }\n\n        #[ink(message)]\n        pub fn get_name(&self)-> String {\n            self.name.clone()\n        }\n    }\n\n}",
      "contentHash": "7f6c31bfc5141b482431380704303ecf7e920c49e6108c16eda8659b6455c944",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/contract-fire/Cargo.toml",
      "content": "[workspace]\n\nresolver = \"1\"\nmembers = [\n  \"src\"\n]",
      "contentHash": "72fbba0ae8f1e9965160d14eb9ffdaf149382667f320919492016c9569c9e8b2",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/contract-fire/package.json",
      "content": "{\n    \"name\": \"@not-a-bird/contract-fire\",\n    \"description\": \"PSP-22 compatible game smart contract for element 'fire'\",\n    \"version\": \"0.0.1\",\n    \"private\": true,\n    \"dependencies\": {},\n    \"scripts\": {\n        \"build\": \"cargo contract build --target wasm --release --manifest-path src/Cargo.toml\"\n    }\n}",
      "contentHash": "3405f6a2335d729c1cd168a53d66e2de75acd64603186b9c82fa42bc796442dc",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/contract-fire/README.md",
      "content": "# fire - Contract\n\nThis is a fire contract.\n\n### Quickstart\n\n- `cargo contract build`",
      "contentHash": "d09d279a31c45cfe16e9bbd1ac4b0a606a01eb124efdefffe243e12ce1bebd39",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/contract-fire/src/Cargo.toml",
      "content": "[package]\nname = \"fire\"\nversion = \"0.0.1\"\nauthors = [\"SIOCODE Llc. <info@siocode.hu>\"]\nedition = \"2021\"\n\n[dependencies]\nink = { version = \"5.0.0\", default-features = false }\n\n\n[lib]\npath = \"lib.rs\"\n\n[features]\ndefault = [\"std\"]\nstd = [\"ink/std\"]\nink-as-dependency = []",
      "contentHash": "d1bcb8caeb6364c15a537ae9c5e4660489bc95071fb62b5e0f1be6f950529ccd",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/contract-fire/src/lib.rs",
      "content": "#![cfg_attr(not(feature = \"std\"), no_std, no_main)]\n\n#[ink::contract]\npub mod fire {\n    pub use ink::prelude::string::String;\n\n    /** Error type for PSP-22 compatible contract for element 'air' */\n    #[derive(Debug, PartialEq, Eq, Copy, Clone)]\n    #[ink::scale_derive(Encode, Decode, TypeInfo)]\n    pub enum Error {}\n\n    #[ink(storage)]\n    pub struct FireContract {\n        name: String,\n    }\n\n    impl Default for FireContract {\n        fn default() -> Self {\n            Self {\n                name: String::from(\"fire\"),\n            }\n        }\n    }\n\n    impl FireContract {\n        /// Creates a new PSP-22 compatible Fire Element contract\n        #[ink(constructor)]\n        pub fn new() -> Self {\n            Self::default()\n        }\n\n        #[ink(message)]\n        pub fn get_name(&self)-> String {\n            self.name.clone()\n        }\n    }\n\n}",
      "contentHash": "f8aa159e12d649e528d4c14962e1cb6b0f281fba5aeff69abc332c7c05e4b9bc",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/contract-lava/Cargo.toml",
      "content": "[workspace]\n\nresolver = \"1\"\nmembers = [\n  \"src\"\n]",
      "contentHash": "72fbba0ae8f1e9965160d14eb9ffdaf149382667f320919492016c9569c9e8b2",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/contract-lava/package.json",
      "content": "{\n    \"name\": \"@not-a-bird/contract-lava\",\n    \"description\": \"PSP-22 compatible game smart contract for element 'lava'\",\n    \"version\": \"0.0.1\",\n    \"private\": true,\n    \"dependencies\": {},\n    \"scripts\": {\n        \"build\": \"cargo contract build --target wasm --release --manifest-path src/Cargo.toml\"\n    }\n}",
      "contentHash": "ff5cd696d66f0401b84905ebcda5d0906c213cb89f125d23ca2f4c9c5e5e709c",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/contract-lava/README.md",
      "content": "# lava - Contract\n\nThis is a lava contract.\n\n### Quickstart\n\n- `cargo contract build`",
      "contentHash": "cc0196f780de8e3e75303d7b64e0f4accd2ffb7ad1faa4c99d1e044247f84602",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/contract-lava/src/Cargo.toml",
      "content": "[package]\nname = \"lava\"\nversion = \"0.0.1\"\nauthors = [\"SIOCODE Llc. <info@siocode.hu>\"]\nedition = \"2021\"\n\n[dependencies]\nink = { version = \"5.0.0\", default-features = false }\n\n\n[lib]\npath = \"lib.rs\"\n\n[features]\ndefault = [\"std\"]\nstd = [\"ink/std\"]\nink-as-dependency = []",
      "contentHash": "3b6067600561e968bc2c78de76a275b47359ffb280a8bcb9797ca3d298f1e51a",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/contract-lava/src/lib.rs",
      "content": "#![cfg_attr(not(feature = \"std\"), no_std, no_main)]\n\n#[ink::contract]\npub mod lava {\n    pub use ink::prelude::string::String;\n\n    /** Error type for PSP-22 compatible contract for element 'air' */\n    #[derive(Debug, PartialEq, Eq, Copy, Clone)]\n    #[ink::scale_derive(Encode, Decode, TypeInfo)]\n    pub enum Error {}\n\n    #[ink(storage)]\n    pub struct LavaContract {\n        name: String,\n    }\n\n    impl Default for LavaContract {\n        fn default() -> Self {\n            Self {\n                name: String::from(\"lava\"),\n            }\n        }\n    }\n\n    impl LavaContract {\n        /// Creates a new PSP-22 compatible Lava Element contract\n        #[ink(constructor)]\n        pub fn new() -> Self {\n            Self::default()\n        }\n\n        #[ink(message)]\n        pub fn get_name(&self)-> String {\n            self.name.clone()\n        }\n    }\n\n}",
      "contentHash": "31d8ca8e8bdb0d4a2b5d7359c038412f5e2a4e41074943483e03cf30b4f2e80e",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/contract-steam/Cargo.toml",
      "content": "[workspace]\n\nresolver = \"1\"\nmembers = [\n  \"src\"\n]",
      "contentHash": "72fbba0ae8f1e9965160d14eb9ffdaf149382667f320919492016c9569c9e8b2",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/contract-steam/package.json",
      "content": "{\n    \"name\": \"@not-a-bird/contract-steam\",\n    \"description\": \"PSP-22 compatible game smart contract for element 'steam'\",\n    \"version\": \"0.0.1\",\n    \"private\": true,\n    \"dependencies\": {},\n    \"scripts\": {\n        \"build\": \"cargo contract build --target wasm --release --manifest-path src/Cargo.toml\"\n    }\n}",
      "contentHash": "d1d5338bf2c97324ccbbd9a8b8908a78c00f68c292e1ffa9970ddb485e06a1f3",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/contract-steam/README.md",
      "content": "# steam - Contract\n\nThis is a steam contract.\n\n### Quickstart\n\n- `cargo contract build`",
      "contentHash": "17d2f77ec300bc5bcb483fa7002bc769156980008cb81dc95c9daf22601b6a1e",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/contract-steam/src/Cargo.toml",
      "content": "[package]\nname = \"steam\"\nversion = \"0.0.1\"\nauthors = [\"SIOCODE Llc. <info@siocode.hu>\"]\nedition = \"2021\"\n\n[dependencies]\nink = { version = \"5.0.0\", default-features = false }\n\n\n[lib]\npath = \"lib.rs\"\n\n[features]\ndefault = [\"std\"]\nstd = [\"ink/std\"]\nink-as-dependency = []",
      "contentHash": "d4240b76ebcbfca97a53f247930d64b9d9043aa607cb1f930bfd19fb333ec826",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/contract-steam/src/lib.rs",
      "content": "#![cfg_attr(not(feature = \"std\"), no_std, no_main)]\n\n#[ink::contract]\npub mod steam {\n    pub use ink::prelude::string::String;\n\n    /** Error type for PSP-22 compatible contract for element 'air' */\n    #[derive(Debug, PartialEq, Eq, Copy, Clone)]\n    #[ink::scale_derive(Encode, Decode, TypeInfo)]\n    pub enum Error {}\n\n    #[ink(storage)]\n    pub struct SteamContract {\n        name: String,\n    }\n\n    impl Default for SteamContract {\n        fn default() -> Self {\n            Self {\n                name: String::from(\"steam\"),\n            }\n        }\n    }\n\n    impl SteamContract {\n        /// Creates a new PSP-22 compatible Steam Element contract\n        #[ink(constructor)]\n        pub fn new() -> Self {\n            Self::default()\n        }\n\n        #[ink(message)]\n        pub fn get_name(&self)-> String {\n            self.name.clone()\n        }\n    }\n\n}",
      "contentHash": "e05f8e83eb7fa3db2a2906301bb046c6001758049fd0afa60d1fb88f9699c19c",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/contract-water/Cargo.toml",
      "content": "[workspace]\n\nresolver = \"1\"\nmembers = [\n  \"src\"\n]",
      "contentHash": "72fbba0ae8f1e9965160d14eb9ffdaf149382667f320919492016c9569c9e8b2",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/contract-water/package.json",
      "content": "{\n    \"name\": \"@not-a-bird/contract-water\",\n    \"description\": \"PSP-22 compatible game smart contract for element 'water'\",\n    \"version\": \"0.0.1\",\n    \"private\": true,\n    \"dependencies\": {},\n    \"scripts\": {\n        \"build\": \"cargo contract build --target wasm --release --manifest-path src/Cargo.toml\"\n    }\n}",
      "contentHash": "73e554672fbc18b041d4a04e9907550b6689ab8baac63e60ca001740d5a15dd5",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/contract-water/README.md",
      "content": "# water - Contract\n\nThis is a water contract.\n\n### Quickstart\n\n- `cargo contract build`",
      "contentHash": "3fddec44d58d1c5a23baa72f0f95c2fecf9629c932e61c35c0e13325d194ad45",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/contract-water/src/Cargo.toml",
      "content": "[package]\nname = \"water\"\nversion = \"0.0.1\"\nauthors = [\"SIOCODE Llc. <info@siocode.hu>\"]\nedition = \"2021\"\n\n[dependencies]\nink = { version = \"5.0.0\", default-features = false }\n\n\n[lib]\npath = \"lib.rs\"\n\n[features]\ndefault = [\"std\"]\nstd = [\"ink/std\"]\nink-as-dependency = []",
      "contentHash": "cdbc038d804804f238c060ccaa463c62f20da5c50d397e31d999d506db628295",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/contract-water/src/lib.rs",
      "content": "#![cfg_attr(not(feature = \"std\"), no_std, no_main)]\n\n#[ink::contract]\npub mod water {\n    pub use ink::prelude::string::String;\n\n    /** Error type for PSP-22 compatible contract for element 'air' */\n    #[derive(Debug, PartialEq, Eq, Copy, Clone)]\n    #[ink::scale_derive(Encode, Decode, TypeInfo)]\n    pub enum Error {}\n\n    #[ink(storage)]\n    pub struct WaterContract {\n        name: String,\n    }\n\n    impl Default for WaterContract {\n        fn default() -> Self {\n            Self {\n                name: String::from(\"water\"),\n            }\n        }\n    }\n\n    impl WaterContract {\n        /// Creates a new PSP-22 compatible Water Element contract\n        #[ink(constructor)]\n        pub fn new() -> Self {\n            Self::default()\n        }\n\n        #[ink(message)]\n        pub fn get_name(&self)-> String {\n            self.name.clone()\n        }\n    }\n\n}",
      "contentHash": "37ad82e52a1e16a4c43248d3559514897759847cafd4f50d6cc3e86105a012c2",
      "noWriteIfExists": false
    }
  ]
}